
USE MASTER
GO

DROP DATABASE IF EXISTS Car2Go
GO

CREATE DATABASE Car2Go
GO

USE Car2Go
GO
--Create table Location
CREATE TABLE LOCATION (
		LOCATION_ID INT,
		STREET_RURAL_NUMBER INT NOT NULL,
		STREET_RURAL_NAME VARCHAR(40) NOT NULL,
		UNIT_NUM VARCHAR(10),
		CITY VARCHAR(50) NOT NULL,
		PROVINCE_STATE VARCHAR(50) NOT NULL,
		POSTAL_CODE VARCHAR(10) NOT NULL CONSTRAINT CK_POSTAL CHECK (POSTAL_CODE LIKE '[A-Z][0-9][A-Z][ ][0-9][A-Z][0-9]'),
		CONSTRAINT PK_LOCATION PRIMARY KEY(LOCATION_ID)
		);	
		

--Create table location_phone
CREATE TABLE LOCATION_PHONE(
		LOCATION_ID INT,
		PHONE_NUMBER VARCHAR (15) CONSTRAINT CK_PHONE_NUM CHECK (PHONE_NUMBER LIKE '[0-9][0-9][0-9][-][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
		CONSTRAINT FK_LOCA_PHONE FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION (LOCATION_ID),
		CONSTRAINT PK_LOCA_PHONE PRIMARY KEY(LOCATION_ID,PHONE_NUMBER)
		);


--Create table class
CREATE TABLE CLASS(
		CLASS_ID INT,
		CLASS_NAME VARCHAR (30) NOT NULL,
		AVAILABILITY VARCHAR (5) NOT NULL,
		RENTAL_PRICE MONEY NOT NULL,
		CONSTRAINT PK_CLASS PRIMARY KEY (CLASS_ID)
		);


--Create table car
CREATE TABLE CAR (
		VIN_NUMBER VARCHAR (30) CONSTRAINT PK_CAR PRIMARY KEY,
		CLASS_ID INT NOT NULL CONSTRAINT FK_CAR1 FOREIGN KEY REFERENCES CLASS (CLASS_ID),
		MAKE VARCHAR (20) NOT NULL,
		MODEL VARCHAR (20) NOT NULL,
		YEAR_MADE INT NOT NULL,
		COLOR VARCHAR (15),
		LOCATION_ID INT CONSTRAINT FK_CAR2 FOREIGN KEY REFERENCES LOCATION (LOCATION_ID)
		);


--Create table customer
CREATE TABLE CUSTOMER(
		D_LICENSE_NUMBER VARCHAR(30) CONSTRAINT CK_DLNUM 
		CHECK (D_LICENSE_NUMBER LIKE ('[A-Z][0-9][0-9][0-9][0-9][-][0-3][0-9][0-1][0-9][0-9][0-9][-][0-9][0-9]')), 
		FIRST_NAME VARCHAR(40) NOT NULL,
		LAST_NAME VARCHAR(40) NOT NULL,
		STREET_RURAL_NUMBER VARCHAR(10) NOT NULL,
		STREET_RURAL_NAME VARCHAR(20) NOT NULL,
		APT_UNIT_NUM VARCHAR(10),
		CITY VARCHAR(20) NOT NULL,
		PROVINCE_STATE VARCHAR(20) CONSTRAINT DF_PROVINCE DEFAULT 'QUEBEC',
		POSTAL_CODE VARCHAR(15) NOT NULL, 
		COUNTRY VARCHAR(20) CONSTRAINT DF_COUNTRY DEFAULT 'CANADA',
		CONSTRAINT PK_CUSTOMER PRIMARY KEY (D_LICENSE_NUMBER)
		);


--Create table reservation
CREATE TABLE RESERVATION(
		D_LICENSE_NUMBER VARCHAR(30) CONSTRAINT CK_DLICSE_NUM
		CHECK (D_LICENSE_NUMBER LIKE ('[A-Z][0-9][0-9][0-9][0-9][-][0-3][0-9][0-1][0-9][0-9][0-9][-][0-9][0-9]')), 
		RESERVATION_ID INT,
		RESERVATION_DATE DATE NOT NULL,
		REQUESTED_CLASS_ID INT,
		FREE_UPGRADE_ID INT,
		CONSTRAINT FK_RESERVATION1 FOREIGN KEY (REQUESTED_CLASS_ID) REFERENCES CLASS (CLASS_ID), 
		CONSTRAINT FK_RESERVATION2 FOREIGN KEY (FREE_UPGRADE_ID) REFERENCES CLASS (CLASS_ID), 
		CONSTRAINT FK_RESERVATION3 FOREIGN KEY (D_LICENSE_NUMBER) REFERENCES CUSTOMER (D_LICENSE_NUMBER),
		CONSTRAINT PK_RESERVATION PRIMARY KEY (D_LICENSE_NUMBER, RESERVATION_ID)
		);

		
--Create customer_phone table
CREATE TABLE CUSTOMER_PHONE(
		D_LICENSE_NUMBER VARCHAR(30) CONSTRAINT CK_DLNUM3 
		CHECK (D_LICENSE_NUMBER LIKE ('[A-Z][0-9][0-9][0-9][0-9][-][0-3][0-9][0-1][0-9][0-9][0-9][-][0-9][0-9]')), 
		COUNTRY_CODE INT CONSTRAINT DF_COUNTR_CD DEFAULT 1,
		AREA_CODE INT,
		LOCAL_NUMBER INT,
		CONSTRAINT FK_CUST_PHONE FOREIGN KEY (D_LICENSE_NUMBER) REFERENCES CUSTOMER (D_LICENSE_NUMBER),
		CONSTRAINT PK_CUST_PHONE PRIMARY KEY (D_LICENSE_NUMBER, COUNTRY_CODE, AREA_CODE, LOCAL_NUMBER)
		);


--Create customer_email table
CREATE TABLE CUSTOMER_EMAIL(
		D_LICENSE_NUMBER VARCHAR(30) CONSTRAINT CK_DLNUM_CUST_EMAIL 
		CHECK (D_LICENSE_NUMBER LIKE ('[A-Z][0-9][0-9][0-9][0-9][-][0-3][0-9][0-1][0-9][0-9][0-9][-][0-9][0-9]')), 
		EMAIL VARCHAR (50),
		CONSTRAINT FK_CUST_EMAIL FOREIGN KEY (D_LICENSE_NUMBER) REFERENCES CUSTOMER (D_LICENSE_NUMBER),
		CONSTRAINT PK_CUST_EMAIL PRIMARY KEY (D_LICENSE_NUMBER, EMAIL)
		);


--Creat rental table
CREATE TABLE RENTAL(
		D_LICENSE_NUMBER VARCHAR(30) CONSTRAINT CK_DLNUM_RENTAL 
		CHECK (D_LICENSE_NUMBER LIKE ('[A-Z][0-9][0-9][0-9][0-9][-][0-3][0-9][0-1][0-9][0-9][0-9][-][0-9][0-9]')), 
		RENTAL_ID INT,
		CLASS_RENTED INT NOT NULL,
		ODOMETER_BEFORE_RENT INT NOT NULL,
		ODOMETER_AFTER_RENT INT NOT NULL,
		GAS_AFTER_RENT VARCHAR (30) NOT NULL,
		RENTAL_DATE DATE NOT NULL,
		RETURN_DATE DATE NOT NULL,
		RENTAL_DURATION INT CONSTRAINT DF_RENTAL_DURATN DEFAULT 1,
		PICKUP_LOCATION_ID INT NOT NULL CONSTRAINT FK_RENTAL1 REFERENCES LOCATION (LOCATION_ID),
		DROPOFF_LOCATION_ID INT CONSTRAINT FK_RENTAL2 REFERENCES LOCATION (LOCATION_ID),
		CONSTRAINT FK_RENTAL3 FOREIGN KEY (D_LICENSE_NUMBER) REFERENCES CUSTOMER (D_LICENSE_NUMBER),
		CONSTRAINT FK_RENTAL4 FOREIGN KEY (CLASS_RENTED) REFERENCES CLASS (CLASS_ID),
		CONSTRAINT PK_RENTAL PRIMARY KEY (D_LICENSE_NUMBER, RENTAL_ID)
		);


--Create promotion table
CREATE TABLE PROMOTION (
		CLASS_ID INT,
		PROMOTION_ID INT,
		DISCOUNT_RATE_PERCENT INT,
		PROMOTION_START_DATE DATE,
		PROMOTION_END_DATE DATE,
		CONSTRAINT FK_PROMOTION FOREIGN KEY (CLASS_ID) REFERENCES CLASS (CLASS_ID),
		CONSTRAINT PK_PROMOTION PRIMARY KEY (CLASS_ID, PROMOTION_ID)
		);

		

--Create drop_off_charge table
CREATE TABLE DROP_OFF_CHARGE(
		D_LICENSE_NUMBER VARCHAR(30) CONSTRAINT CK_DLNUM_DOCHARGE 
		CHECK (D_LICENSE_NUMBER LIKE ('[A-Z][0-9][0-9][0-9][0-9][-][0-3][0-9][0-1][0-9][0-9][0-9][-][0-9][0-9]')), 
		RENTAL_ID INT,
		BILLING_ID INT,
		CLASS_ID INT NOT NULL,
		LICENSE_PLATE_NUM VARCHAR (20),
		PROMOTION_ID INT,
		AMOUNT_DUE MONEY NOT NULL CONSTRAINT DF_AMOUNT DEFAULT $0.00,
		PAYMENT_DATE DATE NOT NULL,
		CONSTRAINT FK_DROP_CHARGE1 FOREIGN KEY (D_LICENSE_NUMBER, RENTAL_ID) REFERENCES RENTAL (D_LICENSE_NUMBER, RENTAL_ID),
		CONSTRAINT FK_DROP_CHARGE2 FOREIGN KEY (CLASS_ID, PROMOTION_ID) REFERENCES PROMOTION (CLASS_ID, PROMOTION_ID),
		CONSTRAINT PK_DROP_CHARGE PRIMARY KEY (D_LICENSE_NUMBER, RENTAL_ID, BILLING_ID)
		);
	

		
		